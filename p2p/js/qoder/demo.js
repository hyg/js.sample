const NodeManager = require('./src/node-manager');
const chalk = require('chalk');

/**
 * P2P ËäÇÁÇπÊºîÁ§∫Á®ãÂ∫è
 */
class P2PDemo {
  constructor() {
    this.nodes = [];
  }

  /**
   * ÊºîÁ§∫Âçï‰∏™ËäÇÁÇπÂäüËÉΩ
   */
  async demoSingleNode() {
    console.log(chalk.blue.bold('\nüéØ ÊºîÁ§∫Âçï‰∏™ P2P ËäÇÁÇπÂäüËÉΩ'));
    console.log(chalk.blue('================================\n'));
    
    try {
      const node = new NodeManager({ port: 8080 });
      
      // ËÆæÁΩÆËá™ÂÆö‰πâÊ∂àÊÅØÂ§ÑÁêÜÂô®
      node.registerMessageHandler('demo', (data, peerId) => {
        console.log(chalk.green(`üì© Êî∂Âà∞ÊºîÁ§∫Ê∂àÊÅØ: ${data.content} Êù•Ëá™ ${peerId}`));
      });

      console.log(chalk.cyan('üöÄ ÂêØÂä®ËäÇÁÇπ...'));
      await node.start();
      
      console.log(chalk.green('‚úÖ ËäÇÁÇπÂêØÂä®ÊàêÂäü'));
      
      // ÊòæÁ§∫ËäÇÁÇπÁä∂ÊÄÅ
      await this.delay(5000);
      const status = node.getStatus();
      this.displayNodeStatus(status);
      
      // Á≠âÂæÖ 15 ÁßíËÆ©Áî®Êà∑ËßÇÂØü
      console.log(chalk.yellow('\n‚è≥ ËäÇÁÇπËøêË°å‰∏≠Ôºå15ÁßíÂêéËá™Âä®ÂÖ≥Èó≠...'));
      await this.delay(15000);
      
      // ‰ºòÈõÖÂÖ≥Èó≠
      console.log(chalk.cyan('\nüõë Ê≠£Âú®‰ºòÈõÖÂÖ≥Èó≠ËäÇÁÇπ...'));
      const availableNodes = await node.stop();
      
      if (availableNodes && availableNodes.length > 0) {
        console.log(chalk.green.bold('\nüîó ÂΩìÂâçÂèØÁî®ÁöÑÂºïÂØºËäÇÁÇπ:'));
        availableNodes.forEach((node, index) => {
          console.log(chalk.cyan(`  { host: '${node.host}', port: ${node.port} }${index < availableNodes.length - 1 ? ',' : ''}`));
        });
      }
      
      console.log(chalk.green.bold('\n‚úÖ ÂçïËäÇÁÇπÊºîÁ§∫ÂÆåÊàê'));
      
    } catch (error) {
      console.error(chalk.red.bold('‚ùå ÊºîÁ§∫Â§±Ë¥•:'), error.message);
    }
  }

  /**
   * ÊºîÁ§∫Â§öËäÇÁÇπËøûÊé•
   */
  async demoMultipleNodes() {
    console.log(chalk.blue.bold('\nüéØ ÊºîÁ§∫Â§ö‰∏™ P2P ËäÇÁÇπËøûÊé•'));
    console.log(chalk.blue('===============================\n'));
    
    try {
      console.log(chalk.cyan('üîß ÂàõÂª∫‰∏§‰∏™ËäÇÁÇπÂÆû‰æã...'));
      
      const node1 = new NodeManager({ port: 8081 });
      const node2 = new NodeManager({ port: 8082 });
      
      this.nodes = [node1, node2];
      
      // ËÆæÁΩÆÊ∂àÊÅØÂ§ÑÁêÜÂô®
      node1.registerMessageHandler('chat', (data, peerId) => {
        console.log(chalk.blue(`üí¨ ËäÇÁÇπ1 Êî∂Âà∞: "${data.message}" Êù•Ëá™ ${peerId}`));
      });
      
      node2.registerMessageHandler('chat', (data, peerId) => {
        console.log(chalk.green(`üí¨ ËäÇÁÇπ2 Êî∂Âà∞: "${data.message}" Êù•Ëá™ ${peerId}`));
      });
      
      console.log(chalk.cyan('üöÄ ÂêØÂä®ËäÇÁÇπ1...'));
      await node1.start();
      
      console.log(chalk.cyan('üöÄ ÂêØÂä®ËäÇÁÇπ2...'));
      await node2.start();
      
      console.log(chalk.yellow('‚è≥ Á≠âÂæÖËäÇÁÇπÂèëÁé∞ÂíåËøûÊé• (30Áßí)...'));
      await this.delay(30000);
      
      // Ê£ÄÊü•ËøûÊé•Áä∂ÊÄÅ
      const status1 = node1.getStatus();
      const status2 = node2.getStatus();
      
      console.log(chalk.blue.bold('\\nüìä ËäÇÁÇπ1 Áä∂ÊÄÅ:'));
      this.displayNodeStatus(status1);
      
      console.log(chalk.green.bold('\\nüìä ËäÇÁÇπ2 Áä∂ÊÄÅ:'));
      this.displayNodeStatus(status2);
      
      // ÂèëÈÄÅÊµãËØïÊ∂àÊÅØ
      console.log(chalk.yellow('\\nüì§ ÂèëÈÄÅÊµãËØïÊ∂àÊÅØ...'));
      
      node1.broadcastMessage('chat', { 
        message: '‰Ω†Â•ΩÔºÅÊàëÊòØËäÇÁÇπ1' 
      });
      
      await this.delay(2000);
      
      node2.broadcastMessage('chat', { 
        message: '‰Ω†Â•ΩÔºÅÊàëÊòØËäÇÁÇπ2' 
      });
      
      await this.delay(5000);
      
      // ÂÖ≥Èó≠ËäÇÁÇπ
      console.log(chalk.cyan('\\nüõë Ê≠£Âú®ÂÖ≥Èó≠ÊâÄÊúâËäÇÁÇπ...'));
      
      const availableNodes1 = await node1.stop();
      const availableNodes2 = await node2.stop();
      
      // ÂêàÂπ∂ÂèØÁî®ËäÇÁÇπ
      const allNodes = [...(availableNodes1 || []), ...(availableNodes2 || [])];
      const uniqueNodes = allNodes.filter((node, index, self) => 
        index === self.findIndex(n => n.host === node.host && n.port === node.port)
      );
      
      if (uniqueNodes.length > 0) {
        console.log(chalk.green.bold('\\nüîó ÂèëÁé∞ÁöÑÂèØÁî®ÂºïÂØºËäÇÁÇπ:'));
        uniqueNodes.forEach((node, index) => {
          console.log(chalk.cyan(`  { host: '${node.host}', port: ${node.port} }${index < uniqueNodes.length - 1 ? ',' : ''}`));
        });
      }
      
      console.log(chalk.green.bold('\\n‚úÖ Â§öËäÇÁÇπÊºîÁ§∫ÂÆåÊàê'));
      
    } catch (error) {
      console.error(chalk.red.bold('‚ùå Â§öËäÇÁÇπÊºîÁ§∫Â§±Ë¥•:'), error.message);
      
      // Ê∏ÖÁêÜËäÇÁÇπ
      for (const node of this.nodes) {
        try {
          await node.stop();
        } catch (e) {
          // ÂøΩÁï•ÂÖ≥Èó≠ÈîôËØØ
        }
      }
    }
  }

  /**
   * ÊòæÁ§∫ËäÇÁÇπÁä∂ÊÄÅ
   */
  displayNodeStatus(status) {
    console.log(chalk.gray(`  ËäÇÁÇπ ID: ${status.nodeId.substring(0, 16)}...`));
    console.log(chalk.gray(`  Êú¨Âú∞Âú∞ÂùÄ: ${status.localAddress.address}:${status.localAddress.port || 'N/A'}`));
    console.log(chalk.gray(`  ÂÖ¨ÁΩëÂú∞ÂùÄ: ${status.publicAddress.address}:${status.publicAddress.port}`));
    console.log(chalk.gray(`  DHT ËäÇÁÇπ: ${status.dht?.nodes || 0}`));
    console.log(chalk.gray(`  Â∑≤ÂèëÁé∞ËäÇÁÇπ: ${status.dht?.peers || 0}`));
    console.log(chalk.gray(`  P2P ËøûÊé•: ${status.p2p.connectedPeers}`));
    console.log(chalk.gray(`  ËøêË°åÁä∂ÊÄÅ: ${status.isRunning ? 'ËøêË°å‰∏≠' : 'Â∑≤ÂÅúÊ≠¢'}`));
  }

  /**
   * Âª∂ËøüÂáΩÊï∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * ËøêË°åÂÆåÊï¥ÊºîÁ§∫
   */
  async runFullDemo() {
    console.log(chalk.blue.bold('üåü P2P ËäÇÁÇπËΩØ‰ª∂ÂäüËÉΩÊºîÁ§∫'));
    console.log(chalk.blue('==========================='));
    console.log(chalk.yellow('Êú¨ÊºîÁ§∫Â∞ÜÂ±ïÁ§∫ P2P ËäÇÁÇπÁöÑ‰∏ªË¶ÅÂäüËÉΩ:'));
    console.log(chalk.yellow('‚Ä¢ NAT Á©øÈÄèÂíåÂú∞ÂùÄÂèëÁé∞'));
    console.log(chalk.yellow('‚Ä¢ DHT ÁΩëÁªúËøûÊé•ÂíåËäÇÁÇπÂèëÁé∞'));
    console.log(chalk.yellow('‚Ä¢ P2P Áõ¥Êé•ÈÄö‰ø°'));
    console.log(chalk.yellow('‚Ä¢ ‰ºòÈõÖÂÖ≥Èó≠ÂíåÁä∂ÊÄÅÊä•Âëä\\n'));
    
    try {
      // ÂçïËäÇÁÇπÊºîÁ§∫
      await this.demoSingleNode();
      
      await this.delay(3000);
      
      // Â§öËäÇÁÇπÊºîÁ§∫
      await this.demoMultipleNodes();
      
      console.log(chalk.green.bold('\\nüéâ ÊºîÁ§∫ÂÆåÊàêÔºÅ'));
      console.log(chalk.blue('\\nüìù ÊÄªÁªì:'));
      console.log(chalk.blue('‚Ä¢ P2P ËäÇÁÇπÂèØ‰ª•ÊàêÂäüÂêØÂä®ÂíåËøêË°å'));
      console.log(chalk.blue('‚Ä¢ NAT Á©øÈÄèÂäüËÉΩÊ≠£Â∏∏ (‰ΩøÁî®Êú¨Âú∞Âú∞ÂùÄÂ§áÁî®ÊñπÊ°à)'));
      console.log(chalk.blue('‚Ä¢ DHT ÁΩëÁªúËøûÊé•ÂäüËÉΩÊ≠£Â∏∏'));
      console.log(chalk.blue('‚Ä¢ P2P ÈÄö‰ø°ÂçèËÆÆÂ∑•‰ΩúÊ≠£Â∏∏'));
      console.log(chalk.blue('‚Ä¢ ‰ºòÈõÖÂÖ≥Èó≠ÂäüËÉΩÊ≠£Â∏∏'));
      console.log(chalk.blue('‚Ä¢ Á≥ªÁªüÂèØ‰ª•ÊòæÁ§∫ÂèØÁî®ÁöÑÂºïÂØºËäÇÁÇπ‰ø°ÊÅØ'));
      
    } catch (error) {
      console.error(chalk.red.bold('\\n‚ùå ÊºîÁ§∫ËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ:'), error.message);
    }
  }
}

// ËøêË°åÊºîÁ§∫
if (require.main === module) {
  const demo = new P2PDemo();
  demo.runFullDemo().catch(error => {
    console.error(chalk.red.bold('ÊºîÁ§∫ÂêØÂä®Â§±Ë¥•:'), error);
    process.exit(1);
  });
}

module.exports = P2PDemo;