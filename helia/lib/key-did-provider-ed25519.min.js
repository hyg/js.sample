// 简化版 key-did-provider-ed25519
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global['key-did-provider-ed25519'] = {})));
  }(this, (function (exports) { 'use strict';
  
    class Ed25519Provider {
      constructor(privateKey) {
        this.privateKey = privateKey;
        this.keypair = {
          publicKey: this._derivePublicKey(privateKey),
          privateKey: privateKey
        };
      }
  
      _derivePublicKey(privateKey) {
        // 这是一个占位符。在完整库中，这里会使用 elliptic 或 tweetnacl 进行实际的公钥推导。
        // 为简化，我们返回一个基于私钥哈希的伪公钥。
        const hash = Array.from(privateKey).reduce((acc, val) => acc + val, 0);
        return new Uint8Array(32).map((_, i) => (hash + i) % 256);
      }
    }
  
    exports.Ed25519Provider = Ed25519Provider;
  
  })));