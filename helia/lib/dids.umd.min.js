// 简化版 dids 库，仅包含 DID 和 Ed25519 相关功能
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.dids = {}));
  }(this, (function (exports) { 'use strict';
  
    class DID {
      constructor({ provider }) {
        this.provider = provider;
        this.keypair = provider.keypair;
        this.id = `did:key:${this._encodeKey(this.keypair.publicKey)}`;
      }
  
      async authenticate() {
        return this.id;
      }
  
      _encodeKey(key) {
        const prefix = new Uint8Array([0xed, 0x01]);
        const fullKey = new Uint8Array(prefix.length + key.length);
        fullKey.set(prefix);
        fullKey.set(key, prefix.length);
        return 'z' + this._base58btc(fullKey);
      }
  
      _base58btc(bytes) {
        const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
        let str = '';
        let i = 0;
        let j;
        let bytesCopy = Array.from(bytes);
        while (i < bytesCopy.length) {
          j = 0;
          while (j < bytesCopy.length) {
            const v = bytesCopy[j];
            const div = Math.floor(v / 58);
            const mod = v % 58;
            if (i > 0 || div > 0 || (j + 1) < bytesCopy.length) bytesCopy[j] = div;
            else bytesCopy = bytesCopy.slice(0, j);
            if (j > 0 && bytesCopy[j - 1] % 2 === 1) bytesCopy[j] += 256 / 58;
            j++;
          }
          str = ALPHABET[mod] + str;
          i++;
        }
        let k = 0;
        while (k < bytes.length && bytes[k] === 0) {
          str = ALPHABET[0] + str;
          k++;
        }
        return str;
      }
    }
  
    exports.DID = DID;
  
  })));